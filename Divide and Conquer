package Lec17;

public class SubarrayDivideConquer {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] arr = { -2, 1, -3, 4, -1, 2, 1, -5, 4 };
		int ans = maxSumSubArray(arr, 0, arr.length - 1);
		System.out.println(ans);
//		quicksort(arr, 0, arr.length - 1);
//		for (int val : arr) {
//			System.out.println(val);
//		}
	}

	public static int maxSumSubArray(int[] arr, int lo, int hi) {
		if (lo == hi) {
			return arr[lo];
		}

		int mid = (lo + hi) / 2;
		int fh = maxSumSubArray(arr, lo, mid);
		int sh = maxSumSubArray(arr, mid + 1, hi);
		int partition = maxLeft(arr, lo, mid) + maxRight(arr, mid + 1, hi);

		return Math.max(partition, Math.max(fh, sh));
	}

	public static int maxLeft(int[] arr, int lo, int hi) {
		int max = Integer.MIN_VALUE;
		int sum = 0;
		for (int i = hi; i >= lo; i--) {
			sum += arr[i];
		if (sum > max) {
			max = sum;
		}
		}
		return max;
	}

	public static int maxRight(int[] arr, int lo, int hi) {
		int max = Integer.MIN_VALUE;
		int sum = 0;
		for (int i = lo; i <= hi; i++) {
			sum += arr[i];
		if (sum > max) {
			max = sum;
		}
		}
		return max;
	}

	public static void quicksort(int[] arr, int lo, int hi) {
		if(lo>=hi)
			return ;
		
		int mid = (lo + hi) / 2;
		int pivot = arr[mid];
		int left = lo;
		int right = hi;
		while (left <= right) {
			while (arr[left] < pivot) {
				left++;
			}
			while (arr[right] > pivot) {
				right--;
			}

			if (left <= right) {
				int temp = arr[left];
				arr[left] = arr[right];
				arr[right] = temp;
				
				left++;
				right--;
			}
		}
		quicksort(arr, lo, right);
		quicksort(arr, left, hi);

	}

}
